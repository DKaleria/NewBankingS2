package by.grgu.recommendationservice.service.impl;

import by.grgu.recommendationservice.database.entity.RecommendationReport;
import by.grgu.recommendationservice.service.RecommendationService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.ParameterizedTypeReference;
import org.springframework.http.HttpMethod;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

@Service
public class RecommendationServiceImpl implements RecommendationService {

    private static final String API_GATEWAY_URL = "http://localhost:8082/";
    private RestTemplate restTemplate;

    @Autowired
    public RecommendationServiceImpl(RestTemplate restTemplate) {
        this.restTemplate = restTemplate;
    }

    public RecommendationReport generateRecommendations(String username, int month, int year, BigDecimal desiredExpenses) {
        String totalExpenseUrl = API_GATEWAY_URL + "expenses/total?username=" + username + "&month=" + month + "&year=" + year;
        BigDecimal totalExpense = restTemplate.getForObject(totalExpenseUrl, BigDecimal.class);

        String totalIncomeUrl = API_GATEWAY_URL + "incomes/total?username=" + username + "&month=" + month + "&year=" + year;
        BigDecimal totalIncome = restTemplate.getForObject(totalIncomeUrl, BigDecimal.class);

        String expenseSourceUrl = API_GATEWAY_URL + "api/expenses/source-breakdown?username=" + username + "&month=" + month + "&year=" + year;
        ResponseEntity<Map<String, BigDecimal>> sourceResponse = restTemplate.exchange(
                expenseSourceUrl, HttpMethod.GET, null, new ParameterizedTypeReference<>() {
                });
        Map<String, BigDecimal> sourceExpenses = sourceResponse.getBody();

        BigDecimal remainingBudget = totalIncome.subtract(totalExpense);
        BigDecimal difference = remainingBudget.subtract(desiredExpenses);

        List<String> recommendations = new ArrayList<>();

        if (difference.compareTo(BigDecimal.ZERO) < 0) {
            recommendations.add("üö® –í–∞—à–∏ —Ç—Ä–∞—Ç—ã –ø—Ä–µ–≤—ã—à–∞—é—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–π –±—é–¥–∂–µ—Ç –Ω–∞ " + difference.abs() + " —Ä—É–±.");
            recommendations.add("üìå –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–∏–∑–∏—Ç—å —Ä–∞—Å—Ö–æ–¥—ã –Ω–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º–∏ –∑–∞—Ç—Ä–∞—Ç–∞–º–∏.");
        } else {
            recommendations.add("‚úÖ –û—Ç–ª–∏—á–Ω–∞—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤–∞—è —Å–∏—Ç—É–∞—Ü–∏—è! –£ –≤–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å " + difference + " —Ä—É–±.");
            recommendations.add("üí∞ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –Ω–∞–ø—Ä–∞–≤–∏—Ç—å —á–∞—Å—Ç—å —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ –∏–ª–∏ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è.");
        }

        sourceExpenses.forEach((source, amount) -> {
            if (amount.compareTo(totalExpense.multiply(BigDecimal.valueOf(0.3))) > 0) {
                recommendations.add("‚ö° –ò—Å—Ç–æ—á–Ω–∏–∫ `" + source + "` –∑–∞–Ω–∏–º–∞–µ—Ç —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à—É—é –¥–æ–ª—é —Ä–∞—Å—Ö–æ–¥–æ–≤. –í–æ–∑–º–æ–∂–Ω–æ, —Å—Ç–æ–∏—Ç –ø–µ—Ä–µ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç—Ä–∞—Ç—ã –≤ —ç—Ç–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏.");
            }
        });

        return new RecommendationReport(totalIncome, totalExpense, desiredExpenses, remainingBudget, recommendations);
    }
}
